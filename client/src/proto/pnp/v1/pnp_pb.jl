# Autogenerated using ProtoBuf.jl v1.0.15 on 2024-06-30T22:06:35.588
# original file: /Users/james/Developer/uoa/p4/p4p/interface/client/src/proto/pnp/v1/pnp.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"Message.Deltas", var"Message.MessageTags", Message

struct var"Message.Deltas"
    x::Int32
    y::Int32
end
PB.default_values(::Type{var"Message.Deltas"}) = (;x = zero(Int32), y = zero(Int32))
PB.field_numbers(::Type{var"Message.Deltas"}) = (;x = 1, y = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"Message.Deltas"})
    x = zero(Int32)
    y = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            x = PB.decode(d, Int32, Val{:zigzag})
        elseif field_number == 2
            y = PB.decode(d, Int32, Val{:zigzag})
        else
            PB.skip(d, wire_type)
        end
    end
    return var"Message.Deltas"(x, y)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"Message.Deltas")
    initpos = position(e.io)
    x.x != zero(Int32) && PB.encode(e, 1, x.x, Val{:zigzag})
    x.y != zero(Int32) && PB.encode(e, 2, x.y, Val{:zigzag})
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"Message.Deltas")
    encoded_size = 0
    x.x != zero(Int32) && (encoded_size += PB._encoded_size(x.x, 1, Val{:zigzag}))
    x.y != zero(Int32) && (encoded_size += PB._encoded_size(x.y, 2, Val{:zigzag}))
    return encoded_size
end

@enumx var"Message.MessageTags" HEARTBEAT=0 TARGET_DELTAS=1 MOVED_DELTAS=2

struct Message
    tag::var"Message.MessageTags".T
    deltas::Union{Nothing,var"Message.Deltas"}
end
PB.default_values(::Type{Message}) = (;tag = var"Message.MessageTags".HEARTBEAT, deltas = nothing)
PB.field_numbers(::Type{Message}) = (;tag = 1, deltas = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:Message})
    tag = var"Message.MessageTags".HEARTBEAT
    deltas = Ref{Union{Nothing,var"Message.Deltas"}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            tag = PB.decode(d, var"Message.MessageTags".T)
        elseif field_number == 2
            PB.decode!(d, deltas)
        else
            PB.skip(d, wire_type)
        end
    end
    return Message(tag, deltas[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::Message)
    initpos = position(e.io)
    PB.encode(e, 1, x.tag)
    !isnothing(x.deltas) && PB.encode(e, 2, x.deltas)
    return position(e.io) - initpos
end
function PB._encoded_size(x::Message)
    encoded_size = 0
    x.tag != var"Message.MessageTags".HEARTBEAT && (encoded_size += PB._encoded_size(x.tag, 1))
    !isnothing(x.deltas) && (encoded_size += PB._encoded_size(x.deltas, 2))
    return encoded_size
end
